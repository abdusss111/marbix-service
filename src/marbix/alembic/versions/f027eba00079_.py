"""

Revision ID: f027eba00079
Revises: 50235e2bd293
Create Date: 2025-07-22 22:51:41.440128

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'f027eba00079'
down_revision: Union[str, Sequence[str], None] = '50235e2bd293'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Add the sources column
    op.add_column('make_requests', sa.Column('sources', sa.Text(), nullable=True))
    
    # CREATE the enum type first (if it doesn't exist)
    userrole_enum = postgresql.ENUM('ADMIN', 'USER', name='userrole')
    userrole_enum.create(op.get_bind(), checkfirst=True)
    
    # Now alter the columns
    op.alter_column('users', 'id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('users', 'email',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('users', 'name',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               nullable=True)
    op.alter_column('users', 'number',
               existing_type=sa.VARCHAR(),
               nullable=False)
    
    # First, drop the existing default value
    op.alter_column('users', 'role',
               existing_type=sa.VARCHAR(),
               existing_nullable=False,
               server_default=None)
    
    # Update any existing 'user' values to 'USER' to match enum
    op.execute("UPDATE users SET role = 'USER' WHERE role = 'user'")
    
    # Now alter the column type to enum with proper casting
    op.alter_column('users', 'role',
               existing_type=sa.VARCHAR(),
               type_=sa.Enum('ADMIN', 'USER', name='userrole'),
               existing_nullable=False,
               postgresql_using="role::userrole")
    
    # Set the new default using the enum type
    op.alter_column('users', 'role',
               existing_type=sa.Enum('ADMIN', 'USER', name='userrole'),
               existing_nullable=False,
               server_default=sa.text("'USER'::userrole"))
               
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    
    # Handle constraints and indexes
    op.drop_constraint(op.f('users_email_key'), 'users', type_='unique')
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.create_unique_constraint(op.f('users_email_key'), 'users', ['email'])
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('users', 'role',
               existing_type=sa.Enum('ADMIN', 'USER', name='userrole'),
               type_=sa.VARCHAR(),
               existing_nullable=False,
               existing_server_default=sa.text("'user'::character varying"))
    op.alter_column('users', 'number',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('users', 'name',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               nullable=False)
    op.alter_column('users', 'email',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('users', 'id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.drop_column('make_requests', 'sources')
    
    # Drop the enum type at the end
    userrole_enum = postgresql.ENUM('ADMIN', 'USER', name='userrole')
    userrole_enum.drop(op.get_bind(), checkfirst=True)
    # ### end Alembic commands ###